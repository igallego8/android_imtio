package com.agora.need;

import android.animation.ObjectAnimator;
import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.app.Fragment;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.Toast;

import com.agora.R;
import com.agora.app.AppConfig;
import com.agora.app.AppContext;
import com.agora.entity.Need;
import com.agora.listener.OnItemTouchListener;
import com.agora.util.SwipeableRecyclerViewTouchListener;
import com.google.android.gms.gcm.GoogleCloudMessaging;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * A simple {@link Fragment} subclass.
 * Activities that contain this fragment must implement the
 * {@link NeedListFragment.OnFragmentInteractionListener} interface
 * to handle interaction events.
 * Use the {@link NeedListFragment#newInstance} factory method to
 * create an instance of this fragment.
 */
public class NeedListFragment extends Fragment implements OnItemTouchListener  {

    private RecyclerView mRecyclerView;
    private RecyclerView.Adapter mAdapter;
    private RecyclerView.LayoutManager mLayoutManager;
    private GridLayoutManager manager;

    private Activity activity;
    private OnFragmentInteractionListener mListener;

    /**
     * Use this factory method to create a new instance of
     * this fragment using the provided parameters.
     *
     * @param param1 Parameter 1.
     * @param param2 Parameter 2.
     * @return A new instance of fragment NeedListFragment.
     */
    // TODO: Rename and change types and number of parameters
    public static NeedListFragment newInstance(String param1, String param2) {
        NeedListFragment fragment = new NeedListFragment();
        Bundle args = new Bundle();
        //args.putString(ARG_PARAM1, param1);
        //args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    public NeedListFragment() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (getArguments() != null) {
           // mParam1 = getArguments().getString(ARG_PARAM1);
           // mParam2 = getArguments().getString(ARG_PARAM2);
        }
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_need_list, container, false);
    }

    @Override
    public void onViewCreated(View view,  Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        //noinspection ConstantConditions
        mRecyclerView = (RecyclerView) getView().findViewById(R.id.needs_recycler_view);

        manager =new GridLayoutManager(getActivity(),2);

        mLayoutManager = new LinearLayoutManager(getActivity());
        mAdapter = new NeedListAdapter(AppContext.needs,this);
        mRecyclerView.setAdapter(mAdapter);
        //adapter
        SwipeableRecyclerViewTouchListener swipeTouchListener =
                new SwipeableRecyclerViewTouchListener(mRecyclerView,
                        new SwipeableRecyclerViewTouchListener.SwipeListener() {
                            @Override
                            public boolean canSwipe(int position) {
                                return true;
                            }

                            @Override
                            public void onDismissedBySwipeLeft(RecyclerView recyclerView, int[] reverseSortedPositions) {
                                for (int position : reverseSortedPositions) {

                                    final int s=position;
                                    DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            switch (which){
                                                case DialogInterface.BUTTON_POSITIVE:
                                                    //Yes button clicked
                                                    AppContext.needs.remove(s);
                                                    mAdapter.notifyItemRemoved(s);
                                                    break;

                                                case DialogInterface.BUTTON_NEGATIVE:
                                                    //No button clicked
                                                    break;
                                            }
                                        }
                                    };
                                    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
                                    builder.setMessage("Are you sure?").setPositiveButton("Yes", dialogClickListener)
                                            .setNegativeButton("No", dialogClickListener).show();
                                   // mItems.remove(position);
                                    //mAdapter.notifyItemRemoved(position);
                                }
                                //mAdapter.notifyDataSetChanged();
                            }

                            @Override
                            public void onDismissedBySwipeRight(RecyclerView recyclerView, int[] reverseSortedPositions) {
                                for (int position : reverseSortedPositions) {
                                    final int s=position;
                                    DialogInterface.OnClickListener dialogClickListener = new DialogInterface.OnClickListener() {
                                        @Override
                                        public void onClick(DialogInterface dialog, int which) {
                                            switch (which){
                                                case DialogInterface.BUTTON_POSITIVE:
                                                    //Yes button clicked
                                                    AppContext.needs.remove(s);
                                                    mAdapter.notifyItemRemoved(s);
                                                    break;

                                                case DialogInterface.BUTTON_NEGATIVE:
                                                    //No button clicked
                                                    break;
                                            }
                                        }
                                    };
                                    AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
                                    builder.setMessage("Are you sure?").setPositiveButton("Yes", dialogClickListener)
                                            .setNegativeButton("No", dialogClickListener).show();


                                }
                                mAdapter.notifyDataSetChanged();
                            }
                        });

        mRecyclerView.addOnItemTouchListener(swipeTouchListener);
        mRecyclerView.setLayoutManager(manager);


        // Change animations are enabled by default since support-v7-recyclerview v22.
        // Disable the change animation in order to make turning back animation of swiped item works properly.

    }

    @Override
    public void onActivityCreated( Bundle savedInstanceState) {

        super.onActivityCreated(savedInstanceState);
        if (AppContext.needs.size()!=0){
            mAdapter.notifyDataSetChanged();
        }else {
            AdpaterAsyncTask task = new AdpaterAsyncTask();
            task.execute();
            getRegId();
        }

    }

    // TODO: Rename method, update argument and hook method into UI event
    public void onButtonPressed(Uri uri) {
        if (mListener != null) {
            mListener.onFragmentInteraction(uri);
        }
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        this.activity=activity;
        try {
            mListener = (OnFragmentInteractionListener) activity;

        } catch (ClassCastException e) {
            throw new ClassCastException(activity.toString()
                    + " must implement OnFragmentInteractionListener");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mListener = null;
    }

    @Override
    public void onCardViewTap(View view, int position) {
        AsyncNeedDetailTask task= new  AsyncNeedDetailTask(position);
        task.execute();

    }

    @Override
    public void onButton1Click(View view, int position) {

    }

    @Override
    public void onButton2Click(View view, int position) {

    }

    /**
     * This interface must be implemented by activities that contain this
     * fragment to allow an interaction in this fragment to be communicated
     * to the activity and potentially other fragments contained in that
     * activity.
     * <p/>
     * See the Android Training lesson <a href=
     * "http://developer.android.com/training/basics/fragments/communicating.html"
     * >Communicating with Other Fragments</a> for more information.
     */
    public interface OnFragmentInteractionListener {
        // TODO: Update argument type and name
        public void onFragmentInteraction(Uri uri);

        public void setProgressState(int state);
    }

    @Override
    public void onPause() {
       // mRecyclerViewDragDropManager.cancelDrag();
        super.onPause();
    }

    @Override
    public void onDestroyView() {
        /*if (mRecyclerViewDragDropManager != null) {
            mRecyclerViewDragDropManager.release();
            mRecyclerViewDragDropManager = null;
        }
        */


        if (mRecyclerView != null) {
            mRecyclerView.setItemAnimator(null);
            mRecyclerView.setAdapter(null);
            mRecyclerView = null;
        }


        mAdapter = null;
        mLayoutManager = null;
        manager=null;
        super.onDestroyView();

    }

    private void onItemViewClick(View v, boolean pinned) {
        int position = mRecyclerView.getChildPosition(v);
        if (position != RecyclerView.NO_POSITION) {
          //  ((DraggableSwipeableExampleActivity) getActivity()).onItemClicked(position);
        }
    }

    private boolean supportsViewElevation() {
        return (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP);
    }

    //public AbstractDataProvider getDataProvider() {
      //  return ((DraggableSwipeableExampleActivity) getActivity()).getDataProvider();
    //}

    public void notifyItemChanged(int position) {
        mAdapter.notifyItemChanged(position);
    }

    public void notifyItemInserted(int position) {
        mAdapter.notifyItemInserted(position);
        mRecyclerView.scrollToPosition(position);
    }




    private class AdpaterAsyncTask extends AsyncTask<Void, Void,   List<Need> > {
        @Override
        protected void onPostExecute( List<Need> result ) {
            // stop the loading animation or something
           // mAdapter.addAll(items);
            if (mAdapter!=null) {
                mAdapter.notifyDataSetChanged();
            }
            Message msg = handler.obtainMessage();
            msg.arg1 = AppConfig.PROGRESS_STOP;
            handler.sendMessage(msg);


        }

        @Override
        protected void onPreExecute() {
            // start loading animation maybe?
            //mAdapter.clear(); // clear "old" entries (optional)
            Message msg = handler.obtainMessage();
            msg.arg1 = AppConfig.PROGRESS_RUNNING;
            handler.sendMessage(msg);
        }

        @Override
        protected  List<Need>  doInBackground(Void... params) {
            // everything in here gets executed in a separate thread
            List<Need> result= AppConfig.dataProvider.fetchNeedsByUserKey(1L);

            for (Need n: result){
                AppContext.needs.add(n);
            }

            return null;
        }

    }




    class AsyncNeedDetailTask extends AsyncTask<Void, Void, Void> {

        private Exception exception;

        Need need;
        Integer position;

        protected void onPreExecute() {

            Message msg = handler.obtainMessage();
            msg.arg1 = AppConfig.PROGRESS_RUNNING;
            handler.sendMessage(msg);
        }

        AsyncNeedDetailTask(Integer position) {
            this.position = position;
        }

        @Override
        protected Void doInBackground(Void... params) {
            need= AppContext.needs.get(position);
            if (need.getDetial()==null) {
                AppConfig.dataProvider.getNeedDetail(need);
            }
            return null;
        }

        @Override
        protected void onPostExecute(Void aVoid) {
            Intent intent = new Intent(activity,NeedDetailActivity.class);
            intent.putExtra("needPosition", position);
            activity.startActivity(intent);
            Message msg = handler.obtainMessage();
            msg.arg1 = AppConfig.PROGRESS_STOP;
            handler.sendMessage(msg);

        }
    }

    GoogleCloudMessaging gcm;
    String PROJECT_NUMBER = "131711330906";
    public void getRegId(){
        new AsyncTask<Void, Void, String>() {
            @Override
            protected String doInBackground(Void... params) {
                String msg = "";
                try {
                    if (gcm == null) {
                        gcm = GoogleCloudMessaging.getInstance(activity.getApplicationContext());
                    }
                    msg = "Device registered, registration ID=" + gcm.register(PROJECT_NUMBER);
                } catch (IOException ex) {
                    msg = "Error :" + ex.getMessage();

                }
                return msg;
            }

            @Override
            protected void onPostExecute(String msg) {
                Log.i("GCM", msg);
            }
        }.execute(null, null, null);
    }


    // Define the Handler that receives messages from the thread and update the progress
    final Handler handler = new Handler() {
        public void handleMessage(Message msg) {
            int current = msg.arg1;
            if(mListener!=null) {
                if (current == AppConfig.PROGRESS_STOP) {
                    mListener.setProgressState(AppConfig.PROGRESS_STOP);
                } else {
                    mListener.setProgressState(AppConfig.PROGRESS_RUNNING);
                }
            }
        }
    };


}
