package com.agora.need;

import android.app.NotificationManager;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.AsyncTask;
import android.preference.PreferenceManager;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.app.NotificationCompat;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Base64;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.WindowManager;

import com.agora.R;
import com.agora.app.ActivityToolBarProgress;
import com.agora.app.AppConfig;
import com.agora.app.AppContext;
import com.agora.entity.AmountFilter;
import com.agora.entity.CashPaymentFilter;
import com.agora.entity.Category;
import com.agora.entity.CreditCardPaymentFilter;
import com.agora.entity.DateFilter;
import com.agora.entity.Filter;
import com.agora.entity.Need;
import com.agora.entity.NeedDetail;
import com.agora.entity.PaymentTypeFilter;
import com.agora.entity.ShippingFilter;
import com.agora.util.NeedType;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

public class NeedFilterListActivity extends ActivityToolBarProgress implements NeedFilterListFragment.OnFragmentInteractionListener {

    public static final String TAG="NeedFilterListActivity";

    private NeedFilterListFragment fragmentFilter;
    private Need need;
    private ProgressDialog progress;
    public static ArrayList<Filter> filters= new ArrayList<>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        setContentView(R.layout.activity_need_filter_list);
        super.onCreate();
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        need=(Need)getIntent().getSerializableExtra("need");
        if (savedInstanceState==null){
            filters = new ArrayList<>();
            Filter f = new AmountFilter();
            f.setName(getString(R.string.maximum_amount));
            f.setIcon(R.drawable.ic_local_atm_black_36dp);
            filters.add(f);
            f = new ShippingFilter();
            f.setName(getString(R.string.shipping_service));
            f.setIcon(R.drawable.ic_local_shipping_black_36dp);
            filters.add(f);
            f = new CreditCardPaymentFilter();
            f.setName(getString(R.string.payment_credit_card));
            f.setIcon(R.drawable.ic_payment_black_36dp);
            filters.add(f);
            f = new CashPaymentFilter();
            f.setName(getString(R.string.payment_cash));
            f.setIcon(R.drawable.ic_local_atm_black_36dp);
            filters.add(f);
            f = new DateFilter();
            f.setName(getString(R.string.service_date));
            f.setIcon(R.drawable.ic_event_black_36dp);
            filters.add(f);
            fragmentFilter = NeedFilterListFragment.newInstance(need,filters);
            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();
            transaction.add(R.id.fragment12, fragmentFilter, "fragmentFilter");
            transaction.commit();

        }else{
            fragmentFilter = (NeedFilterListFragment) getSupportFragmentManager().findFragmentByTag("fragmentFilter");
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_need_filter_list, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        final int id = item.getItemId();
        switch (id){
            case R.id.action_ok:
                need.setSettlementDate(new Date(System.currentTimeMillis()));

                for (Filter f: filters){

                    if (f instanceof AmountFilter){
                        need.setBestOfferWeight(f.getWeight());
                        Log.i(TAG,"AmountFilter:"+f.getWeight());
                    }else if (f instanceof ShippingFilter){
                        need.setShipToClientDestinationWeight(f.getWeight());
                        Log.i(TAG, "ShippingFilter:" + f.getWeight());
                    }else if (f instanceof CreditCardPaymentFilter){
                        need.setCreditCardPaymentWeight(f.getWeight());
                        Log.i(TAG, "CreditCardPaymentFilter:" + f.getWeight());
                    }else if (f instanceof CashPaymentFilter){
                        need.setCashPaymentWeight(f.getWeight());
                        Log.i(TAG, "CashPaymentFilter:" + f.getWeight());
                    }else if (f instanceof DateFilter){
                        need.setExpirationDateWeight(f.getWeight());
                        Log.i(TAG, "DateFilter:" + f.getWeight());
                    }

                }
                AsyncCreateNeedTask task = new AsyncCreateNeedTask();
                task.execute();
                break;
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void onFragmentInteraction(Uri uri) {

    }



    private class AsyncCreateNeedTask extends AsyncTask<Void,Need,Void> {

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            progress = ProgressDialog.show(NeedFilterListActivity.this, null,
                    getResources().getString(R.string.please_wait), true);
            progress.show();
            AppContext.needs.add(need);
        }


        @Override
        protected Void doInBackground(Void... params) {
            Long needKey= AppConfig.dataProvider.createNeed(need,0L);
            need.setNeedKey(needKey);
            if (AppContext.attachedImagesConfirmed){
                BitmapFactory.Options options = new BitmapFactory.Options();
                options.inSampleSize = 3;
                for (Bitmap bitmap: AppContext.attachedImages) {
                    if (bitmap != null) {
                        try {
                            ByteArrayOutputStream stream = new ByteArrayOutputStream();
                            bitmap.compress(Bitmap.CompressFormat.JPEG, 50, stream);
                            byte[] byte_arr = stream.toByteArray();
                            String encodedString = Base64.encodeToString(byte_arr, Base64.NO_WRAP);
                            sendImageHTTP(encodedString,needKey);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }


                    }
                }



            }
            return null;
        }


        @Override
        protected void onPostExecute(Void aVoid) {
            super.onPostExecute(aVoid);
            Intent intent =  new Intent(NeedFilterListActivity.this,NeedListActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
            NeedFilterListActivity.this.startActivity(intent);
            NeedFilterListActivity.this.finish();
            progress.dismiss();
        }
    }



    // Make Http call to upload Image to Java server
    public void sendImageHTTP(String encodedString, Long needKey) {
        HashMap<String,String> params = new HashMap<String,String> ();
        params.put("image",encodedString);
        params.put("key",needKey.toString());
        params.put("entity","need");
        AppConfig.dataProvider.uploadImage(params);

    }

}
