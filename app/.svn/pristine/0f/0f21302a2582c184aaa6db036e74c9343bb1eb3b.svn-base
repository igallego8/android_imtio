package com.agora.data;

import com.agora.app.AppConfig;
import com.agora.builder.BuilderFactory;
import com.agora.builder.NeedBuilder;
import com.agora.builder.NeedDetailBuilder;
import com.agora.entity.Conversation;
import com.agora.entity.Bid;
import com.agora.entity.Client;
import com.agora.entity.Company;
import com.agora.entity.Deal;
import com.agora.entity.Employee;
import com.agora.entity.Message;
import com.agora.entity.Need;
import com.agora.entity.NeedDetail;
import com.agora.entity.ProductBid;
import com.agora.entity.ServiceBid;
import com.agora.entity.Topic;
import com.agora.json.HTTPJSONRequest;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Ivan on 17/09/15.
 */
public class WSDataProvider implements IDataProvider {


    @Override
    public List<Need> fetchNeedsByUserKey(Long userKey) {
        //Make a call to WS and it returns json
        JSONObject reader = HTTPJSONRequest.requestHttpGet(AppConfig.WS_URL+"/"+userKey);
        List<Need> list =  new ArrayList<>();
        try {
            if (reader==null){
                //Mostrar erorr que no hay connection WS
            }else {
              //  JSONArray array = reader.getJSONArray("needs");
               // for (int n = 0; n < array.length(); n++) {
                  //  JSONObject jsonNeed = array.getJSONObject(n);
                    Need need = (Need) BuilderFactory.getBuilder(NeedBuilder.class.getName()).build(reader);
                    if (need != null) ;
                    list.add(need);
               // }
            }

        } catch (JSONException e) {
            e.printStackTrace();
        }
        return list;

    }

    @Override
    public Need findNeedByNeedKey(Long needKey) {
        //Make a call to WS and it returns json
        JSONObject reader = HTTPJSONRequest.requestHttpGet(AppConfig.WS_URL+"?needKey="+needKey);
        try {
            JSONObject jsonNeed  = reader.getJSONObject("need");
            Need need=(Need)BuilderFactory.getBuilder(NeedBuilder.class.getName()).build(jsonNeed) ;
            return  need;
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void getNeedDetail(Need need) {
        //Make a call to WS and it returns json
        JSONObject reader = HTTPJSONRequest.requestHttpGet(AppConfig.WS_URL+"?needKey="+need.getNeedKey());
        try {
            JSONObject jsonNeedDetails  = reader.getJSONObject("needDetails");
            NeedDetail needDetail=(NeedDetail)BuilderFactory.getBuilder(NeedDetailBuilder.class.getName()).build(jsonNeedDetails) ;
            need.setDetial(needDetail);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }



    @Override
    public boolean createNeed(Need need, Long userKey) {
        JSONObject jsonObject = new JSONObject();
        return false;
    }

    @Override
    public boolean deleteNeedByNeedKey(Long needKey) {
        return false;
    }

    @Override
    public List<Conversation> fetchConversationByUserKey(Long userKey) {
        return null;
    }

    @Override
    public List<Conversation> fetchConversationByCompanyKey(Long companyKey) {
        return null;
    }

    @Override
    public List<Message> fetchMessagesByNeedKey(Long needKey) {
        return null;
    }

    @Override
    public List<Conversation> fetchConversationByNeedKey(Long needKey) {
        return null;
    }

    @Override
    public void sendClientMessage(Message message, Need need, Client client) {

    }

    @Override
    public void sendCompanyMessage(Message message, Need need, Employee employee) {

    }

    @Override
    public Bid findBidbyBidKey(Long bidKey) {
        return null;
    }

    @Override
    public List<Bid> fetchBidByNeedKey(Need need) {
        return null;
    }

    @Override
    public List<Bid> fetchBidByCompanyKey(Long compnayKey) {
        return null;
    }

    @Override
    public boolean createBid(Bid bid, Long User) {
        return false;
    }

    @Override
    public boolean deleteBidByBidKey(Long bidKey) {
        return false;
    }

    @Override
    public Bid findBidByBidKey(Long userKey) {
        return null;
    }

    @Override
    public boolean createDeal(Deal deal) {
        return false;
    }

    @Override
    public boolean cancelDealByDealKey(Long deal) {
        return false;
    }

    @Override
    public List<Deal> fetchDealsByUserKey(Long userKey) {
        return null;
    }

    @Override
    public List<Deal> fetchDealByCompanyKey(Long companyKey) {
        return null;
    }

    @Override
    public Deal findDealByDealKey(Long dealKey) {
        return null;
    }

    @Override
    public List<Company> fetchFavoritiesByUserKey(Long userKey) {
        return null;
    }

    @Override
    public void setFavorityCompany(Long companyKey, Long userKey) {

    }

    @Override
    public boolean login(String id, String password) {
        return false;
    }

    @Override
    public boolean createAccount(Client client) {
        return false;
    }

    @Override
    public Client findClientByUserKey(Long userKey) {
        return null;
    }

    @Override
    public List<Topic> fetchTopics() {
        return null;
    }

    @Override
    public void notifyMessagesRead(List<Long> messageKeys) {

    }

    @Override
    public void notifyMessagesReceived(Long messageKey) {

    }

    @Override
    public byte[] imageLowQuality(String file) {
        return new byte[0];
    }

    @Override
    public byte[] imageHighQuality(String file) {
        return new byte[0];
    }
}
